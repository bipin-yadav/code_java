import java.util.*;

class solution {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    for (int n = 0; n < t; n++) {
      int a = sc.nextInt();
      //System.out.println(a);
      String s = Integer.toBinaryString(a);
      //System.out.println("Binary is " + s);
      char[] str = s.toCharArray();
      HashSet<String> set = new HashSet<>();
      findPermutations(str, 0, str.length, set);
      //System.out.println(set);
      int sum = 0;
      for (String value : set) {
        int next = Integer.parseInt(value);
        sum = sum + next;
      }
      System.out.println(sum);
    }
  }

  // Returns true if str[curr] does not matches with any of the
  // characters after str[start]
  private static boolean shouldSwap(char[] str, int start, int curr) {
    for (int i = start; i < curr; i++) {
      if (str[i] == str[curr]) {
        return false;
      }
    }
    return true;
  }

  public static int parseInt(String binary) {
    if (binary.length() < Integer.SIZE) return Integer.parseInt(binary, 2);
    int result = 0;
    byte[] bytes = binary.getBytes();

    for (int i = 0; i < bytes.length; i++) {
      if (bytes[i] == 49) {
        result = result | (1 << (bytes.length - 1 - i));
      }
    }
    return result;
  }

  // Prints all distinct permutations in str[0..n-1]
  private static void findPermutations(char[] str, int index, int n, HashSet<String> set) {
    int total = 0;
    if (index >= n) {
      //System.out.println(str);
      int anInt = parseInt(new String(str));
      total = total + anInt ;
      //System.out.println(total);
      set.add(String.valueOf(total));
      return ;
    }

    for (int i = index; i < n; i++) {
      // Proceed further for str[i] only if it
      // doesn't match with any of the characters
      // after str[index]
      boolean check = shouldSwap(str, index, i);
      if (check) {
        swap(str, index, i);
        findPermutations(str, index + 1, n, set);
        swap(str, index, i);
      }
    }
  }

  static void swap(char[] str, int i, int j) {
    char c = str[i];
    str[i] = str[j];
    str[j] = c;
  }
}
